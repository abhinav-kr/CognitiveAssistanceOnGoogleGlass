#!/usr/bin/env python

import sys
import json
from flask import Flask
from flask import request
from flask.ext import restful
from flask.ext.restful import reqparse
from flask.ext.restful import Resource
from flask.ext.restful import abort

try:
    from gabriel.common.config import Const as Const
    from gabriel.common.config import ServiceMeta
except ImportError as e:
    sys.path.insert(0, "..")
    from gabriel.common.config import Const as Const
    from gabriel.common.config import ServiceMeta


custom_service_list = list()

class CustomService(object):
    def __init__(self, service_name, data):
        self.service_name = service_name
        self.content = data

    def update_data(self, json_str):
        self.content = json_str

    def get_service_name(self):
        return self.service_name

    def get_data(self):
        return self.content


def get_ip(iface = 'eth0'):
    import socket
    import struct
    import fcntl
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sockfd = sock.fileno()
    SIOCGIFADDR = 0x8915

    ifreq = struct.pack('16sH14s', iface, socket.AF_INET, '\x00' * 14)
    try:
        res = fcntl.ioctl(sockfd, SIOCGIFADDR, ifreq)
    except:
        return None
    ip = struct.unpack('16sH2x4s8x', res)[2]
    return socket.inet_ntoa(ip)


class CreateService(Resource):
    KEY_SERVICE_NAME    = "service_name"
    KEY_SERVICE_CONTENT = "service_content"
    KEY_RET             = "return"

    def post(self, service_name):
        global custom_service_list

        existing_service = self._find_service(service_name)
        if existing_service is not None:
            msg = "Service %s is existing. Delete first." % service_name
            abort(404, message=msg)

        data = dict(json.loads(request.data))
        new_service = CustomService(service_name, data)
        custom_service_list.append(new_service)

        # send response
        ret_msg = {
                CreateService.KEY_RET: "success",
                CreateService.KEY_SERVICE_NAME: new_service.get_service_name(),
                CreateService.KEY_SERVICE_CONTENT: new_service.get_data(),
                }
        return ret_msg, 201

    def get(self, service_name):
        requested_service = service_name
        if requested_service == None:
            msg = "Need service ID"
            abort(404, message=msg)

        matching_service = self._find_service(service_name)
        if matching_service == None:
            msg = "Not a valid service name: %s" % service_name
            abort(404, message=msg)
        ret_msg = {
                CreateService.KEY_RET: "success",
                CreateService.KEY_SERVICE_NAME: matching_service.get_service_name(),
                CreateService.KEY_SERVICE_CONTENT: matching_service.get_data(),
                }
        return ret_msg, 200

    def delete(self, service_name):
        requested_service = service_name
        if requested_service == None:
            msg = "Need service ID"
            abort(404, message=msg)
        matching_service = self._find_service(service_name)
        if matching_service == None:
            msg = "Not a valid service name: %s" % service_name
            abort(404, message=msg)
        custom_service_list.remove(matching_service)
        ret_msg = {
                CreateService.KEY_RET: "success",
                CreateService.KEY_SERVICE_NAME: matching_service.get_service_name(),
                CreateService.KEY_SERVICE_CONTENT: matching_service.get_data(),
                }
        return ret_msg, 202

    def _find_service(self, requested_service):
        global custom_service_list

        matching_service = None
        for service_item in custom_service_list:
            if service_item.service_name == requested_service:
                matching_service = service_item
                return matching_service
        return matching_service


class ManageService(Resource):
    def get(self):
        ret_list = list()
        for service in custom_service_list:
            ret_list.append({
                    CreateService.KEY_SERVICE_NAME: service.get_service_name(),
                    CreateService.KEY_SERVICE_CONTENT: service.get_data(),
                    })
        ret_msg = {
                CreateService.KEY_RET: "success",
                "services": ret_list,
                }
        return ret_msg, 200


class GabrielInfo(Resource):
    parser = reqparse.RequestParser()
    parser.add_argument('task', type=str)
    ip_addr = get_ip(iface="eth0")
    service_info = {
            ServiceMeta.RESULT_RETURN_SERVER_LIST: list(),
            ServiceMeta.VIDEO_TCP_STREAMING_ADDRESS: str(ip_addr),
            ServiceMeta.VIDEO_TCP_STREAMING_PORT: int(Const.APP_SERVER_VIDEO_PORT),
            ServiceMeta.ACC_TCP_STREAMING_ADDRESS: str(ip_addr),
            ServiceMeta.ACC_TCP_STREAMING_PORT: int(Const.APP_SERVER_ACC_PORT),
            ServiceMeta.UCOMM_COMMUNICATE_ADDRESS: str(ip_addr),
            ServiceMeta.UCOMM_COMMUNICATE_PORT: int(Const.UCOMM_COMMUNICATE_PORT),
            }

    def get(self):
        return self.service_info, 200

    def put(self):
        data = dict(json.loads(request.data))
        ucomm_ips = data.get(ServiceMeta.RESULT_RETURN_SERVER_LIST, None)
        if ucomm_ips is None or len(ucomm_ips) == 0:
            msg = "Need list of ucomm_ips"
            abort(404, message=msg)
        if type(ucomm_ips) != type(list()):
            ucomm_ips = [ucomm_ips]

        original_list = self.service_info.get(ServiceMeta.RESULT_RETURN_SERVER_LIST, list())
        merged_set = set(original_list)
        for new_address in ucomm_ips:
            merged_set.add(str(new_address))
        self.service_info[ServiceMeta.RESULT_RETURN_SERVER_LIST] = list(merged_set)

        # send response
        ret_msg = {
                CreateService.KEY_RET: "success",
                "objects": self.service_info,
                }
        return ret_msg, 202


parser = reqparse.RequestParser()
# run REST server
app = Flask(__name__)
api = restful.Api(app)
api.add_resource(GabrielInfo, '/')
api.add_resource(ManageService, '/services/')
api.add_resource(CreateService, '/services/<string:service_name>')

# do no turn on debug mode. it make a mess for graceful terminate
#app.run(debug=True)
app.run(host="0.0.0.0", port=Const.SERVICE_DISCOVERY_HTTP_PORT)
